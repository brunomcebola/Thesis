{% extends "views/base.jinja" %}
{% from "components/modal.jinja" import modal with context %}
{% block title %}
  Nodes
{% endblock title %}
{% block body %}
  <div class="container py-4">
    <div class="row justify-content-center pb-3">
      <div class="col my-auto ps-3">
        <h2 class="m-0">Nodes</h2>
      </div>
      <div class="col my-auto">
        <div class="input-group">
          <input class="form-control rounded-pill"
                 type="search"
                 placeholder="Search for a node" />
        </div>
      </div>
      <div class="col my-auto align-right pe-3">
        <button type="button"
                class="btn btn-primary"
                data-bs-toggle="modal"
                data-bs-target="#new-node-modal">Add node</button>
      </div>
    </div>
    {% call modal("new-node-modal", "Add node") %}
      <form id="add-node-form" class="row g-3 mx-n4 needs-validation" novalidate>
        <div class="col-12">
          <label for="name" class="form-label">Name</label>
          <input type="text"
                 id="name"
                 name="name"
                 pattern="^[a-zA-Z0-9]{1,15}$"
                 placeholder="ex: Algarve 1365"
                 class="form-control"
                 required>
          <div class="invalid-feedback">Please provide a valid name. Only letter and numbers are allowed</div>
        </div>
        <div class="col-12">
          <label for="address" class="form-label">Address</label>
          <div class="input-group" id="address" name="address">
            <input type="text"
                   id="host"
                   name="host"
                   pattern="^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$"
                   class="form-control"
                   placeholder="ex: 127.0.0.1"
                   required>
            <span class="input-group-text">:</span>
            <input type="text"
                   id="port"
                   name="port"
                   pattern="^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[1-9][0-9]{0,3}|0)$"
                   placeholder="ex: 5000"
                   class="form-control"
                   required>
            <div class="invalid-feedback">
              Please provide a valid address. Host must be in the range 0.0.0.0 to 255.255.255.255 and port in the range 0 to 65535
            </div>
          </div>
        </div>
        <div class="col-12">
          <label for="image" class="form-label">Cover image</label>
          <input type="file" id="image" name="image" class="form-control">
        </div>
        <div class="col-12 d-flex justify-content-between align-items-center"
             id="submit">
          <span id="add-modal-message" class="text-danger"></span>
          <button class="btn btn-primary" type="submit">Submit</button>
        </div>
      </form>
    {% endcall %}
    {% call modal("del-node-modal", "Delete node") %}
      <form id="del-node-form" class="row">
        <div class="col-12">
          <p id="del-modal-message"></p>
        </div>
        <div class="col-12 d-flex justify-content-end align-items-center">
          <button class="btn btn-primary" type="submit">Delete</button>
        </div>
      </form>
    {% endcall %}
    {# TODO: add nodes grid correctly #}
    {% if content is defined %}
      {% with data=content, actions=["pencil", "trash"] %}
        {% include "components/grid.jinja" %}
      {% endwith %}
    {% else %}
      {% with message="There are no nodes defined!" %}
        {% include "components/empty.jinja" %}
      {% endwith %}
    {% endif %}
  </div>
{% endblock body %}
{% block script %}
  <script>
    const data = {{ content|default([])|safe }}

    const delModal = new bootstrap.Modal(document.getElementById('del-node-modal'))
    const delModalForm = document.getElementById("del-node-form")
    const delModalMsg = document.getElementById("del-modal-message")


    window.addEventListener('trash', function (event) {
      const node = data.find(dict => dict.cardId == event.detail);
      delModalMsg.innerHTML = `Are you sure you want to delete ${node.cardTitle} @ ${node.cardDescription}?`
      delModal.show()
      delModalForm.dataset.id = node.cardId.substring(1)
    }, false)

    delModalForm.addEventListener('submit', function (event) {
      event.preventDefault()
      event.stopPropagation()

      fetch(`/api/nodes/${delModalForm.dataset.id}`, {
        method: 'DELETE'
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(errorData => {
            throw new Error(errorData.error);
          });
        }
        return response.json();
      })
      .then(data => {
        window.location.reload()
      })
      .catch(error => {
        delModal.hide()
        alert(error.message)
      });
    }, false)

    const addModalForm = document.getElementById('add-node-form')
    const addModalMsg = document.getElementById('add-modal-message')

    addModalForm.addEventListener('submit', function (event) {
      event.preventDefault()
      event.stopPropagation()
      if (addModalForm.checkValidity()) {
        const formData = new FormData(addModalForm);

        formData.append("address", formData.get("host")+":"+formData.get("port"))
        formData.delete("host")
        formData.delete("port")

        fetch('/api/nodes', {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            return response.json().then(errorData => {
              throw new Error(errorData.error);
            });
          }
          return response.json();
        })
        .then(data => {
          window.location.reload()
        })
        .catch(error => {
          errorMessage.innerHTML = error.message
        });
      }
      addModalForm.classList.add('was-validated')
    }, false)
  </script>
{% endblock script %}
