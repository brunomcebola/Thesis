{% extends "views/base.jinja" %}
{% block title %}
  Logs
{% endblock title %}
{% block body %}
  <div id="logs-container" class="container py-4">
    <div id="logs"></div>
    <div id="controls" class="p-3">
      <button class="btn btn-primary" id="reload-btn">Reload</button>
      <span id="indicator">New logs available</span>
    </div>
  </div>
{% endblock body %}
{% block script %}
  <script>
    const target = {{ request.path.split("/")[1:-1] }}.join("/")
    const logs = document.getElementById('logs');
    const reloadBtn = document.getElementById('reload-btn');
    const indicator = document.getElementById('indicator');

    const timestampRegex = /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}$/;
    const timestampColor = "darkgreen"
    const levelInfoColor = "lightgreen"
    const levelErrorColor = "red"
    const levelOtherColor = "violet"
    const messageColor= "white"

    var lineCount = 1;

    function loadLogs() {
      const logsLineHeight = parseInt(window.getComputedStyle(logs).lineHeight);
      const logsDivHeight = logs.clientHeight - parseInt(window.getComputedStyle(logs).paddingTop) - parseInt(window.getComputedStyle(logs).paddingBottom);
      const numLines = Math.floor(logsDivHeight / logsLineHeight);

      axios.get(`/api/${target}/logs?start_line=${lineCount}&nb_lines=${Math.floor((numLines * 100))}`)
        .then(response => {
          prevLineCount = lineCount
          response.data.forEach(line => {
            let [timestamp, level, message] = line.split(' - ', 3);

            if(timestampRegex.test(timestamp)) {
              var logItem = `<span style="color: ${timestampColor}">${timestamp}</span>  -  `
              logItem += `<span style="color: ${level === "INFO" ? levelInfoColor : level === "ERROR" ? levelErrorColor : levelOtherColor}">${level}</span>  -  `
              logItem += `<span style="color: ${messageColor}">${message}</span>`;
            } else {
              var logItem = `<span style="color: ${messageColor}">${line}</span>`
            }

            logs.insertAdjacentHTML('afterbegin', logItem);

            lineCount++;
          });
          logs.scrollTop = logsLineHeight * (lineCount - prevLineCount);
        })
        .catch(error => {})
    }

    logs.addEventListener('scroll', function() {
      if (logs.scrollTop === 0) {
        loadLogs()
      }
    });

    reloadBtn.addEventListener('click', function() {
      location.reload();
    });

    window.onload = loadLogs;
  </script>
{% endblock script %}
