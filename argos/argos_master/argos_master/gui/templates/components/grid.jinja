{#

Expected parameters:

- data: List of dictionaries containing the following keys:
    - redirectURL: URL to redirect to when the card is clicked
    - imgSrc: URL of the image to display in the card
    - imgAlt: Alt text for the image
    - cardTitle: Title of the card
    - cardDescription: Description of the card
    - cardAction: Font Awesome icon to display in the card

    Ex: [
      {
        "redirectURL": "/",
        "imgSrc": "/static/images/no_media.png",
        "imgAlt": "No media",
        "cardTitle": "Title",
        "cardDescription": "Description",
        "cardAction": "info-circle"
      },
      ...
    ]

#}
<div class="container">
  <div class="row" id="grid"></div>
</div>
<script type="module">
  const cardHTML = `
    <div class="card-container col-12 col-md-6 col-xl-3 p-3">
      <div class="card" data-redirect="{redirectURL}" onclick="window.location.href = '{redirectURL}'">
        <img class="card-img-top" src="{imgSrc}" alt="{imgAlt}">
        <div class="card-body d-flex justify-content-between align-items-center" data-title="{cardTitle}" data-description="{cardDescription}" data-action="{cardAction}">
          <div>
            <h5 class="card-title">{cardTitle}</h5>
            <p class="card-text">{cardDescription}</p>
          </div>
          <div>
            <i class="fas fa-{cardAction}"></i>
          </div>
        </div>
      </div>
    </div>
  `

  const data = {{ data|tojson }};
  var data_index = 0

  const heightIncrements = window.innerHeight
  var targetHeight = window.innerHeight

  const grid = document.getElementById('grid')

  async function addCardToHTML(data) {
    var card = cardHTML
      .replaceAll("{redirectURL}", data.redirectURL || "")
      .replaceAll("{imgSrc}", data.imgSrc || "{{url_for('gui.static', filename='images/no_media.png')}}")
      .replaceAll("{imgAlt}", data.imgAlt || "No media")
      .replaceAll("{cardTitle}", data.cardTitle || "")
      .replaceAll("{cardDescription}", data.cardDescription || "")
      .replaceAll("{cardAction}", data.cardAction || "info-circle")

    grid.innerHTML += card;

    // Get the newly added image
    const cardDiv = grid.querySelector('.card-container:last-of-type');
    const img = cardDiv.querySelector('img');

    // Wait for the image to load
    await new Promise((resolve, _) => {
      img.onload = async () => {
        await new Promise(resolve => setTimeout(resolve, 50));
        resolve();
      };
      img.onerror = async () => {
        img.src = "{{url_for('gui.static', filename='images/no_media.png')}}";
        img.alt = "No media";

        await new Promise(resolve => setTimeout(resolve, 10));
      };
    });
  }

  async function addCards() {
    while (document.body.offsetHeight < targetHeight && data_index < data.length) {
      await addCardToHTML(data[data_index]);
      data_index++
      if (document.body.offsetHeight > targetHeight && data_index < data.length) {
        let initialHeight = document.body.offsetHeight
        while (document.body.offsetHeight == initialHeight && data_index < data.length) {
          await addCardToHTML(data[data_index]);
          data_index++
        }
        if (document.body.offsetHeight > initialHeight) {
          grid.removeChild(document.querySelector('.card-container:last-of-type'))
          data_index--
        }
      }
    }
    targetHeight += heightIncrements
  }

  await addCards()

  window.onscroll = async () => {
    if (window.innerHeight + window.scrollY >= 0.9 * document.body.offsetHeight) {
      await addCards()
    }
  }

</script>
