{#

Expected parameters:

- data: List of dictionaries containing the following keys:
    - cardTitle: Title of the card
    - cardDescription: Description of the card
    - imgSrc: URL of the image to display in the card
    - imgAlt: Alt text for the image
    - redirectURL: URL to redirect to when the card is clicked

    Ex: [
      {
        "cardTitle": "Title",
        "cardDescription": "Description",
        "imgSrc": "/static/images/no_media.png",
        "imgAlt": "No media",
        "redirectURL": "/",
      },
      ...
    ]

- cardAction: Font Awesome icon to display in the cards action section

#}
<div class="container">
  <div class="row" id="grid"></div>
</div>
<script type="module">
  const cardHTML = `
    <div class="card-container col-12 col-md-6 col-xl-3 p-3" id="{cardId}">
      <div class="card" data-redirect="{redirectURL}">
        <div class="card-img flex-grow-1 d-flex justify-content-center align-items-center">
          <img src="{imgSrc}" alt="{imgAlt}">
        </div>
        <div class="card-body flex-grow-0 d-flex align-items-end border-top border-secondary-subtle" data-title="{cardTitle}" data-description="{cardDescription}" data-has-actions="{cardHasActions}">
          <div class="w-100 d-flex justify-content-between align-items-center">
            <div class="body-content">
              <h5 class="card-title">{cardTitle}</h5>
              <p class="card-text">{cardDescription}</p>
            </div>
            <div class="body-actions">
              {cardActions}
            </div>
          </div>
        </div>
      </div>
    </div>
  `

  const data = {{ data|tojson }}
  const actions = {{ actions|default([])|safe }}
  const actionsHTML = actions.map(action => `<i class="fas fa-${action} ms-3"></i>`).join('')

  var data_index = 0

  const heightIncrements = window.innerHeight
  var targetHeight = window.innerHeight

  const grid = document.getElementById('grid')

  async function addCardToHTML(data) {
    data.cardId = data.cardId || "c" + Math.random().toString(36).substring(7);
    data.cardTitle = data.cardTitle || "";
    data.cardDescription = data.cardDescription || "";
    data.imgSrc = data.imgSrc || "{{url_for('gui.static', filename='images/no_media.png')}}";
    data.imgAlt = data.imgAlt || "No media";
    data.redirectURL = data.redirectURL || "";

    var newCard = cardHTML
      .replaceAll("{cardId}", data.cardId)
      .replaceAll("{cardTitle}", data.cardTitle)
      .replaceAll("{cardDescription}", data.cardDescription)
      .replaceAll("{imgSrc}", data.imgSrc)
      .replaceAll("{imgAlt}", data.imgAlt)
      .replaceAll("{redirectURL}", data.redirectURL)
      .replaceAll("{cardHasActions}", actions.length > 0)
      .replaceAll("{cardActions}", actionsHTML);

    grid.insertAdjacentHTML('beforeend', newCard);

    const img = document.querySelector(`#${data.cardId} img`);

    // Wait for the image to load
    await new Promise((resolve, _) => {
      img.onload = async () => {
        await new Promise(resolve => setTimeout(resolve, 50));
        resolve();
      };
      img.onerror = async () => {
        img.src = "{{url_for('gui.static', filename='images/no_media.png')}}";
        img.alt = "No media";

        await new Promise(resolve => setTimeout(resolve, 10));
      };
    });

    const card = document.querySelector(`#${data.cardId} .card`);
    card.addEventListener('click', () => {
      const redirectURL = card.dataset.redirect;
      if (redirectURL) {
        window.location.href = redirectURL;
      }
    });

    actions.forEach(action => {
      const actionSvg = document.querySelector(`#${data.cardId} .body-actions .fa-${action}`);
      actionSvg.addEventListener('click', (event) => {
        event.stopPropagation();
        window.dispatchEvent(new CustomEvent(action, { detail: data.cardId }))
      });
    });
  }

  async function addCards() {
    while (document.body.offsetHeight < targetHeight && data_index < data.length) {
      await addCardToHTML(data[data_index]);
      data_index++
      if (document.body.offsetHeight > targetHeight && data_index < data.length) {
        let initialHeight = document.body.offsetHeight
        while (document.body.offsetHeight == initialHeight && data_index < data.length) {
          await addCardToHTML(data[data_index]);
          data_index++
        }
        if (document.body.offsetHeight > initialHeight) {
          grid.removeChild(document.querySelector('.card-container:last-of-type'))
          data_index--
        }
      }
    }
    targetHeight += heightIncrements
  }

  await addCards()

  window.onscroll = async () => {
    if (window.innerHeight + window.scrollY >= 0.9 * document.body.offsetHeight) {
      await addCards()
    }
  }

  window.onresize = async () => {
    targetHeight = window.innerHeight
    await addCards()
  }

</script>
